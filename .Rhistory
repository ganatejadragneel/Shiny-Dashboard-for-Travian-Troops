group_by(genus, plot_id) %>%
summarize(mean_weight = mean(weight))
str(surveys_gw)
surveys_spread <- surveys_gw %>%
spread(key = genus, value = mean_weight)
str(surveys_spread)
surveys_gw %>%
spread(genus, mean_weight, fill = 0) %>%
head()
surveys_gather <- surveys_spread %>%
gather(key = genus, value = mean_weight, -plot_id)
str(surveys_gather)
surveys_spread %>%
gather(key = genus, value = mean_weight, Baiomys:Spermophilus) %>%
head()
surveys_complete <- surveys %>%
filter(!is.na(weight),
!is.na(hindfoot_length),
!is.na(sex))
species_counts <- surveys_complete %>%
count(species_id) %>%
filter(n >= 50)
surveys_complete <- surveys_complete %>%
filter(species_id %in% species_counts$species_id)
write_csv(surveys_complete, path = "C:\\Users\\hp\\Desktop\\VIT\\Data Visualization\\RLab\\lab9\\surveys_complete.csv")
ggplot(data = surveys_complete)
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_l
ength))
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))
## Loading the package 'BBmisc'
if(suppressMessages(!require('BBmisc'))) install.packages('BBmisc')
suppressMessages(library('BBmisc'))
pkgs <- c('plyr', 'dplyr', 'magrittr', 'tidyr', 'googleVis', 'htmltools', 'rCharts', 'DT', 'sparkline', 'lubridate')
suppressAll(lib(pkgs))
rm(pkgs)
## Set the googleVis options first to change the behaviour of plot.gvis, so that only the chart
##  component of the HTML file is written into the output file.
##
## Set option to below if you want to plot an independent webpage with graph
#'@ op <- options(gvis.plot.tag=NULL)
op <- options(gvis.plot.tag='chart')
options(rpubs.upload.method = 'internal')
## knitr configuration
# invalidate cache when the tufte version changes
suppressMessages(library('knitr'))
opts_chunk$set(tidy = TRUE, fig.path = 'figure/', comment = NA, message = FALSE, cache.extra = packageVersion('tufte'), echo = TRUE, progress = TRUE)#, fig.align = 'center', fig.keep = 'high', fig.width = 10, fig.height = 6)
install.packages("tufte")
## Set the googleVis options first to change the behaviour of plot.gvis, so that only the chart
##  component of the HTML file is written into the output file.
##
## Set option to below if you want to plot an independent webpage with graph
#'@ op <- options(gvis.plot.tag=NULL)
op <- options(gvis.plot.tag='chart')
options(rpubs.upload.method = 'internal')
## knitr configuration
# invalidate cache when the tufte version changes
suppressMessages(library('knitr'))
opts_chunk$set(tidy = TRUE, fig.path = 'figure/', comment = NA, message = FALSE, cache.extra = packageVersion('tufte'), echo = TRUE, progress = TRUE)#, fig.align = 'center', fig.keep = 'high', fig.width = 10, fig.height = 6)
## Setting for rCharts
## http://ramnathv.github.io/posts/rcharts-nvd3/
#'@ options(warn = -1, htmltools.dir.version = FALSE,
#'@         rcharts.mode = 'iframesrc', rcharts.cdn = TRUE,
#'@         RCHART_WIDTH = 600, RCHART_HEIGHT = 400,
#'@         RCHART_TEMPLATE = 'Rickshaw.html', RCHART_LIB = 'morris')
## clear memory cache to lease the memory capacity ease
gc()
## clear memory cache to lease the memory capacity ease
gc()
suppressMessages(library('plyr'))
suppressMessages(library('dplyr'))
suppressMessages(library('magrittr'))
suppressMessages(library('formattable'))
install.packages("formattable")
suppressMessages(library('plyr'))
suppressMessages(library('dplyr'))
suppressMessages(library('magrittr'))
suppressMessages(library('formattable'))
suppressMessages(library('knitr'))
suppressMessages(library('sparkline'))
if(!file.exists('data/')) dir.create('data/')
lnk <- 'https://d3c33hcgiwev3.cloudfront.net/_595a8f2c3bcd6e2c185467a9768e641c_Programming-Assignment-1-Data-New.zip?Expires=1461974400&Signature=QMD76O1PvIyB4RkBYDcdwIcZuy9GSYh~cw7iCvTPtZUIdfXr67Bd09DXYs2a3gbfhLjGYWzK3oLHwDrlty~N7Hbcie07X~Sk42G~dFlJ8UIP1a-vt2vTWUDkyZC5LqA5QlRq9VhlHrgljW9-xXkrENO8NxbK2EZd9bZ3ExzW2Po_&Key-Pair-Id=APKAJLTNE6QMUY6HBC5A'
destfile <- 'Programming-Assignment-1-Data-New.zip'
if(!file.exists(paste0('data/', destfile))) {
download.file(lnk, destfile = paste0('data/', destfile))
}
if(!file.exists(paste0('data/final'))) {
## Unzip the dataset
#'@ unzip(paste0('data/', destfile), exdir = 'data/final/de_DE', list = TRUE)
# Error in unzip(paste0("data/", destfile), exdir = "data/final/de_DE",  :
#   'exdir' does not exist
unzip(paste0('data/', destfile), exdir = 'data/')
}
## Loading the package 'BBmisc'
if(suppressMessages(!require('BBmisc'))) install.packages('BBmisc')
suppressMessages(library('BBmisc'))
pkgs <- c('plyr', 'dplyr', 'magrittr', 'tidyr', 'googleVis', 'htmltools', 'rCharts', 'DT', 'sparkline', 'lubridate')
suppressAll(lib(pkgs))
rm(pkgs)
## Set the googleVis options first to change the behaviour of plot.gvis, so that only the chart
##  component of the HTML file is written into the output file.
##
## Set option to below if you want to plot an independent webpage with graph
#'@ op <- options(gvis.plot.tag=NULL)
op <- options(gvis.plot.tag='chart')
options(rpubs.upload.method = 'internal')
## knitr configuration
# invalidate cache when the tufte version changes
suppressMessages(library('knitr'))
opts_chunk$set(tidy = TRUE, fig.path = 'figure/', comment = NA, message = FALSE, cache.extra = packageVersion('tufte'), echo = TRUE, progress = TRUE)#, fig.align = 'center', fig.keep = 'high', fig.width = 10, fig.height = 6)
## Setting for rCharts
## http://ramnathv.github.io/posts/rcharts-nvd3/
#'@ options(warn = -1, htmltools.dir.version = FALSE,
#'@         rcharts.mode = 'iframesrc', rcharts.cdn = TRUE,
#'@         RCHART_WIDTH = 600, RCHART_HEIGHT = 400,
#'@         RCHART_TEMPLATE = 'Rickshaw.html', RCHART_LIB = 'morris')
## clear memory cache to lease the memory capacity ease
gc()
suppressMessages(library('plyr'))
suppressMessages(library('dplyr'))
suppressMessages(library('magrittr'))
suppressMessages(library('formattable'))
suppressMessages(library('knitr'))
suppressMessages(library('sparkline'))
if(!file.exists('data/')) dir.create('data/')
lnk <- 'https://d3c33hcgiwev3.cloudfront.net/_595a8f2c3bcd6e2c185467a9768e641c_Programming-Assignment-1-Data-New.zip?Expires=1461974400&Signature=QMD76O1PvIyB4RkBYDcdwIcZuy9GSYh~cw7iCvTPtZUIdfXr67Bd09DXYs2a3gbfhLjGYWzK3oLHwDrlty~N7Hbcie07X~Sk42G~dFlJ8UIP1a-vt2vTWUDkyZC5LqA5QlRq9VhlHrgljW9-xXkrENO8NxbK2EZd9bZ3ExzW2Po_&Key-Pair-Id=APKAJLTNE6QMUY6HBC5A'
destfile <- 'Programming-Assignment-1-Data-New.zip'
if(!file.exists(paste0('data/', destfile))) {
download.file(lnk, destfile = paste0('data/', destfile))
}
if(!file.exists(paste0('data/final'))) {
## Unzip the dataset
#'@ unzip(paste0('data/', destfile), exdir = 'data/final/de_DE', list = TRUE)
# Error in unzip(paste0("data/", destfile), exdir = "data/final/de_DE",  :
#   'exdir' does not exist
unzip(paste0('data/', destfile), exdir = 'data/')
}
game<- read.csv('./Datasets/game.csv',stringsAsFactors = F)
setwd('C:/Users/hp/Desktop/VIT/Data Visualization/Project/Review 3/Main')
recommendation <- read.csv('recommendation.csv',stringsAsFactors = F,header=T)
game<- read.csv('./Datasets/game.csv',stringsAsFactors = F)
troops <- read.csv('./TravianTroops.csv',stringsAsFactors = F)
shiny::runApp('C:/Users/hp/Desktop/VIT/Data Visualization/Project/Review 3/sample_revenue_dashboard_shiny')
runApp('C:/Users/hp/Desktop/VIT/Data Visualization/Project/Review 3/sample_revenue_dashboard_shiny')
runApp('C:/Users/hp/Desktop/VIT/Data Visualization/Project/Review 3/sample_revenue_dashboard_shiny')
runApp('C:/Users/hp/Desktop/VIT/Data Visualization/Project/Review 3/sample_revenue_dashboard_shiny')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/hp/Desktop/VIT/Data Visualization/Project/Review 3/temp.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggthemes")
runApp()
install.packages("reshape");
runApp()
runApp()
dfm2 <- melt(data1[,c('Race','Wood','Clay', 'Iron', 'Crop')],id.vars = 1)
library(shiny)
require(shinydashboard)
library(ggplot2)
library(dplyr)
library(magrittr)
library(reshape)
library(ggthemes)
setwd('C:/Users/hp/Desktop/VIT/Data Visualization/Project/Review 3/Main')
troops <- read.csv('./TravianTroops.csv',stringsAsFactors = F)
header <- dashboardHeader(title = "Travian")
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Travian Race", tabName = "TravianRace", icon = icon("dashboard")),
menuItem("Travian Class", tabName = "TravianClass", icon = icon("th")),
menuItem("Characteristics", tabName = "Characteristics",icon = icon("th")),
menuItem("DataSet", icon = icon("send",lib='glyphicon'),
href = "https://www.kaggle.com/cblesa/travian-troops"),
menuItem("Github", icon = icon("send",lib='glyphicon'),
href = "https://github.com/ganatejadragneel")
)
)
frow1 <- fluidRow(
infoBoxOutput("value1")
)
frow3 <- fluidRow(
infoBoxOutput("value2")
)
frow2 <- fluidRow(
box(
title = "Attack"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("plot1", height = "300px")
),
box(
title = "Speed"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("plot2", height = "300px")
),
box(
title = "Definf"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,collapsed = TRUE
,plotOutput("plot3", height = "300px")
),
box(
title = "Defcav"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,collapsed = TRUE
,plotOutput("plot4", height = "300px")
),
box(
title = "Loot"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,collapsed = TRUE
,plotOutput("plot5", height = "300px")
),
box(
title = "Cons"
,status = "primary"
,solidHeader = TRUE
,collapsed = TRUE
,collapsible = TRUE
,plotOutput("plot6", height = "300px")
),
box(
title = "Time"
,status = "primary"
,solidHeader = TRUE
,collapsed = TRUE
,collapsible = TRUE
,plotOutput("plot7", height = "300px")
)
)
frow4 <- fluidRow(
box(
title = "Attack"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("plot11", height = "300px")
),
box(
title = "Speed"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("plot21", height = "300px")
),
box(
title = "Definf"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,collapsed = TRUE
,plotOutput("plot31", height = "300px")
),
box(
title = "Defcav"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,collapsed = TRUE
,plotOutput("plot41", height = "300px")
),
box(
title = "Loot"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,collapsed = TRUE
,plotOutput("plot51", height = "300px")
),
box(
title = "Cons"
,status = "primary"
,solidHeader = TRUE
,collapsed = TRUE
,collapsible = TRUE
,plotOutput("plot61", height = "300px")
),
box(
title = "Time"
,status = "primary"
,solidHeader = TRUE
,collapsed = TRUE
,collapsible = TRUE
,plotOutput("plot71", height = "300px")
)
)
frow5 <- fluidRow(
box(
title = "Battle"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,collapsed = TRUE
,width=11
,plotOutput("plot12", height = "400px")
)
)
frow6 <- fluidRow(
box(
title = "Resources"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,collapsed = TRUE
,width=11
,plotOutput("plot22", height = "400px")
)
)
ui <- dashboardPage(title = 'Data Visualization', header, sidebar, body, skin='green')
body <- dashboardBody(
tabItems(
tabItem(tabName = "TravianRace",frow1,frow2),
tabItem(tabName = "TravianClass",frow3,frow4),
tabItem(tabName = "Characteristics",frow5,frow6)
)
)
server <- function(input, output) {
#creating the valueBoxOutput content
output$value1 <- renderInfoBox({
infoBox("Race",5,"Race Stats")
})
output$value2 <- renderInfoBox({
infoBox("Classes",3,"Class Stats")
})
output$plot1 <- renderPlot({
ggplot(data=troops,aes(Race,Attack))+geom_point(color="red")
})
output$plot2 <- renderPlot({
ggplot(data=troops,aes(Race,Speed))+geom_point(color="yellow")
})
output$plot3 <- renderPlot({
ggplot(data=troops,aes(Race,Definf))+geom_point(color="blue")
})
output$plot4 <- renderPlot({
ggplot(data=troops,aes(Race,Defcav))+geom_point(color="green")
})
output$plot5 <- renderPlot({
ggplot(data=troops,aes(Race,Loot))+geom_point(color="orange")
})
output$plot6 <- renderPlot({
ggplot(data=troops,aes(Race,Cons))+geom_point(color="red")
})
output$plot7 <- renderPlot({
ggplot(data=troops,aes(Race,Time))+geom_point(color="blue")
})
output$plot11 <- renderPlot({
ggplot(data=troops,aes(Class,Attack))+geom_point(color="red")
})
output$plot21 <- renderPlot({
ggplot(data=troops,aes(Class,Speed))+geom_point(color="yellow")
})
output$plot31 <- renderPlot({
ggplot(data=troops,aes(Class,Definf))+geom_point(color="blue")
})
output$plot41 <- renderPlot({
ggplot(data=troops,aes(Class,Defcav))+geom_point(color="green")
})
output$plot51 <- renderPlot({
ggplot(data=troops,aes(Class,Loot))+geom_point(color="orange")
})
output$plot61 <- renderPlot({
ggplot(data=troops,aes(Class,Cons))+geom_point(color="red")
})
output$plot71 <- renderPlot({
ggplot(data=troops,aes(Class,Time))+geom_point(color="blue")
})
#Characteristics Tab
data1  <- troops %>%
filter(Name != "Settler") %>%
select(-Name, -Class) %>%
group_by(Race) %>%
summarise_all(funs(mean)) %>%
as.data.frame()
racevec  <- data1$Race
data1 %<>%
select(-Race) %>%
scale() %>%
as.data.frame.matrix() %>%
mutate(Race = racevec)
dfm <- melt(data1[,c('Race','Attack','Definf', 'Defcav', 'Speed', 'Loot', 'Cons', 'Time')],id.vars = 1)
output$plot12 <- renderPlot({
ggplot(dfm,aes(x = Race,y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = position_dodge(width = 0.7)) +
theme_tufte() +
theme(axis.title.x=element_blank(),
axis.title.y=element_blank()) +
coord_flip() +
ggtitle("Overall battle characteristics  among diffrent tribes")
})
dfm2 <- melt(data1[,c('Race','Wood','Clay', 'Iron', 'Crop')],id.vars = 1)
print(dfm2)
output$plot22 <- renderPlot({
ggplot(dfm2,aes(x = Race,y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = position_dodge(width = 0.7)) +
theme_tufte() +
theme(axis.title.x=element_blank(),
axis.title.y=element_blank()) +
coord_flip() +
ggtitle("Overall resource characteristics among diffrent tribes")
})
}
shinyApp(ui, server)
dfm2 <- melt(data1[,c('Race','Wood','Clay', 'Iron', 'Crop')],id.vars = 1)
data1 %<>%
select(-Race) %>%
scale() %>%
as.data.frame.matrix() %>%
mutate(Race = racevec)
#Characteristics Tab
data1  <- troops %>%
filter(Name != "Settler") %>%
select(-Name, -Class) %>%
group_by(Race) %>%
summarise_all(funs(mean)) %>%
as.data.frame()
racevec  <- data1$Race
data1 %<>%
select(-Race) %>%
scale() %>%
as.data.frame.matrix() %>%
mutate(Race = racevec)
dfm <- melt(data1[,c('Race','Attack','Definf', 'Defcav', 'Speed', 'Loot', 'Cons', 'Time')],id.vars = 1)
print(dfm)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(gridExtra)
library(RColorBrewer)
library(fmsb)
install.packages("gridExtra")
install.packages("fmsb")
runApp()
runApp()
output$plot13 <- renderPlot({
ggplot(data=troops,aes(Class,Time))+geom_point(color="blue")
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggplotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
